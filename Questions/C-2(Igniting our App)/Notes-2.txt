*********************************************************HARI OHM************************************************************************
i. Igniting our App - means how you can write production ready code

ii. npm - doesn't stand for node package manager and everything else
    a. manages packages
    b. standard repositories for all the packages
    c. To see npm from scratch:
        1. npm init
        Note: Then fill all the info as asked.

Note: Important package in our project --> bundler

iii. bundler - 
    a. It helps you to compress, clean, minify all html, css, js files before sending to production.
    b. E.g. Webpack, Parcel, Vite
    c. Configuring our bundler using Parcel:
        1. npm install -D parcel  (D stands for installing as dev dependencies as we are not going to use in production)
        2. you'll see in package.json - "parcel": "^2.10.3" (What does this upper arrow means?)
            --> It is a caret(^ or ~)
            --> If there is any upgrade in version, like 2.10.4(minor change), parcel will automatically upgrade this (if there is caret sign)
            --> If there is any upgrade in version, like 3.10.4(major change), parcel will automatically upgrade this (if there is tilde sign)

iv. dependencies - 
    a. Two types dev dependencies and another is normal dependencies.
    b. dev dependencies - required in development phase
    c. normal dependencies - used in production also.

v. package.json - 
    a. configuration for our npm
    b. take care of any library version
    c. keep track of all dependencies
    d. keeps track of what version of that package is installed in our system

v. package-lock.json - 
    a. keep track of exact version of all dependencies that is being installed 
    b. E.g. Suppose today 2.8.5 is released, 
        package.json --> approximate version ^2.8.3 but
        package-lock.json --> exact version 2.8.3
    
    c. Goto parcel --> integrity --> sha-512(which is hash, but why is it here?)
        Reason: Heard of that it is working on my local machine but not on production, due to hash not present, 
                package-lock hash(sha-512) will make sure whatever version in my machine is same version deployed to production.

vi. node_modules - 
    a. all code of all dependencies fetched from npm into our system.
    b. kinda database contains all the data that our package or dependencies needs

Note: When we installed parcel, it fetched all code of parcel and put it inside node_modules.

Doubt: We installed only parcel, why so many dependencies came in node_modules ?
Ans:    When we installed parcel, parcel itself as a project has it's own dependencies required to run.
        That's why all dependencies required to run parcel came along with it.
        Term used is Transitive dependencies - when dependencies itself requires another dependencies

Doubt: How would npm know Parcel has it's own dependencies? What are the dependencies of Parcel?
        How many packages does have in package.json ?

Ans:    Our project has parcel in package.json and parcel itself has it's own package.json which has normal and dev dependencies

Note: To not put node_modules in git, put it in git ignore

Doubt: Can we put package.json and package-lock.json inside our Git and if yes then why?
Ans: Yes, it's important to push both files in Git as one includes dependencies we have and another the exact version dependencies have
    So, it's must to push both the files.

Note: If I have package.json and package-lock.json, I can regenerate node_modules.

Doubt: Why can't we put node_modules inside Git?
Ans: Whatever you can re-generate do not put on GitHub like node_modules.

**************************************Part-2*************************************************

vii. Igniting our App using Parcel:

    a. Command: npx parcel index.html ( source file )

    Note: npx means executing a package
          npm is when you want to install a package

Note: Ways to bring react in our App:
    a. Using CDN links (not preferred way react/reactDOM into our project)
        Reason: To fetch react via CDN is costly operation.
    b. Using npm (preferred way)
        Reason: Using npm, we already have react in our node_modules, no need to make another network call.
        --> npm install react
        --> npm install react-dom


viii. Parcel - https://parceljs.org/

    a. Dev Build
    b. Local Server
    c. HMR - Hot Module Replacement - automatically refershing your page
    d. Using file watching algorithms (refreshing page as soon as you do something in App.js)
    e. faster builds - caching
    f. image optimization
    g. minify files --> compressing --> Bundling( for production purposes)
    h. consistent hashing - 
    i. code splitting - 
    j. differential bundling - when app is hosted, your app can be opened installed chrome, parcel take care of it. - support old browsers
    k. Diagonistic
    l. Error handling
    m. HTTPS - parcel allows you to host your app over HTTPS
    n. Tree Shaking - remove unused code for you
    o. Different dev and prod bundles
    p. Prod builds - npx parcel build index.html


    Note: Final build will goto dist folder

    Note: After running command, creates three files, index.html, index.css and index.js

    Note: .parcel-cache and dist folder can be regenerated, so no need to put inside git.(To regenerate, type npx parcel index.html)

ix. Making our app compatible with old browsers: (browserslist)

    a. browserslist library(already installed, check node_modules)
    b. Need to tell browserslist library, what browsers we want support for.
    c. Under package.json, add like below:
        "browserslist":[
            "last 2 Chrome versions",
            "last 2 Firefox versions"
        ]

    Note: It means now our app will be compatible for last 2 version of chrome and Firefox.
    Note: It doesn't mean it will not work for other browsers, it might be or not be but it will definiely work for these browsers.

    Application: Useful for goverment websites.

