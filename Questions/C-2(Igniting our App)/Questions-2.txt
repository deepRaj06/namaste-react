***************************************HARI OHM******************************************
Q1. What is NPM ?
Ans: NPM defined as -
    a. manages packages.
    b. standard repositories for all the packages
    c. Command line utility for installing Node.js packages.

Q2. What is 'Parcel/Webpack'?Why do we need it?
Ans: Parcel/Webpack  - bundlers
    a. Helps you to compress, clean, minify all files before sending    
        to production.
    b. So that it becomes easier to send a request or receive the 
        response from the server when you transfer multiple files.

Q3. What is '.parcel.cache' ?
Ans: .parcel.cache - directory created by parcel
                    that stores intermediate results.
    a. Contains information about project when Parcel builds it.
    b. Allows Parcel to re-build Application without having to  
        re-parse or re-analyze everything.

Q4. What is npx ?
Ans: npx - Node Package Execute
    a. A npm package runner can execute any package from npm registry
        without installing it.
    b. If you install npm above 5.2.0, 
        npx will be automatically installed.
    Link: https://www.codingninjas.com/studio/library/difference-between-npm-and-npx

Q5. Difference between dependencies and devDependencies ?
Ans: devDependencies - packages required in production.
    normal dependencies - packages required in development and testing phase.

Q6. What is Tree Shaking?
Ans: Tree Shaking - Removal of dead code
    a. Dead Code - Like comments, console.log() etc.

Q7. What is Hot Module Replacement (HMR)?
Ans: HMR - 
    a. Feature allows developers to update files or modules in A
        runnnign application without reloading a full page.

Q8. List of superpowers of Parcel ?
Ans: 
    a. build - can create both dev and prod builds.
    b. server - can run on local server
    c. faster builds - using caching in .parcel.cache
    d. image - helps in image optimization
    e. compressing
    f. bundling
    g. HMR
    h. code splitting
    i. differential bundling
    j. Error handling
    k. Tree Shaking
    l. Diagonistic

Q9. What is '.gitignore'? What should we add and not add in it?
Ans: .gitignore - 
    a. plain text file that tells Git to ignore
        and not track certain files/folders
    b. add - add files which can't be regenerated (e.g. package.json)
    c. not add - which can't be regenerated(e.g. package-lock.json)

Q10. Diff b/w package.json and package-lock.json ?
Ans: 
    1. package.json
        a. particular property and it's version.
        b. track of all dependencies

    2. package-lock.json
        a. exact dependency of that particular property, sub-dependencies.
        b. track of exact version of all dependencies

Q11. Why should I not modify package-lock.json ?
Ans: lock files ensure anyone installing dependencies
        gets the exact same version.

Q12. What is node_modules? Is it a good idea to push that on git ?
Ans: a. code of all dependencies fetched from npm into our system.
     b. No, we must not push node_modules to git as it can be 
        easily regenerated by just doing npm i.


Q13. What is dist folder ?
Ans: 
    a. store the built and bundled version of your code.
    b. contains all necessary files to 
        deloy your application to a production server.
    
Q14. What is browserslist ?
Ans: 
    a. library to define upto which version of which browser 
        you want to give support for.